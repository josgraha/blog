// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Post$Blog from "../src/components/Post.bs.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as ApolloHooks from "reason-apollo-hooks/src/ApolloHooks.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Section$Blog from "../src/components/layout/Section.bs.js";

var ppx_printed_query = "query ListPostsQuery  {\nlistPosts  {\nitems  {\nid  \ntitle  \nbody  \ncreatedAt  \nupdatedAt  \ntags  \nauthor  {\nfirstName  \nlastName  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "listPosts");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "items");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        tmp$1 = match$3 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$4)).map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return ;
                  } else {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match$1 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$2 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_json.decodeString(value$2);
                      tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type Post is missing");
                    }
                    var match$3 = Js_dict.get(value$1, "title");
                    var tmp$1;
                    if (match$3 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$3);
                      var match$4 = Js_json.decodeString(value$3);
                      tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field title on type Post is missing");
                    }
                    var match$5 = Js_dict.get(value$1, "body");
                    var tmp$2;
                    if (match$5 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$5);
                      var match$6 = Js_json.decodeString(value$4);
                      tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                    } else {
                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field body on type Post is missing");
                    }
                    var match$7 = Js_dict.get(value$1, "createdAt");
                    var tmp$3;
                    if (match$7 !== undefined) {
                      var value$5 = Caml_option.valFromOption(match$7);
                      var match$8 = Js_json.decodeNull(value$5);
                      tmp$3 = match$8 !== undefined ? undefined : Caml_option.some(value$5);
                    } else {
                      tmp$3 = undefined;
                    }
                    var match$9 = Js_dict.get(value$1, "updatedAt");
                    var tmp$4;
                    if (match$9 !== undefined) {
                      var value$6 = Caml_option.valFromOption(match$9);
                      var match$10 = Js_json.decodeNull(value$6);
                      tmp$4 = match$10 !== undefined ? undefined : Caml_option.some(value$6);
                    } else {
                      tmp$4 = undefined;
                    }
                    var match$11 = Js_dict.get(value$1, "tags");
                    var match$12 = Js_dict.get(value$1, "author");
                    var tmp$5;
                    if (match$12 !== undefined) {
                      var value$7 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$12)));
                      var match$13 = Js_dict.get(value$7, "firstName");
                      var tmp$6;
                      if (match$13 !== undefined) {
                        var value$8 = Caml_option.valFromOption(match$13);
                        var match$14 = Js_json.decodeString(value$8);
                        tmp$6 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                      } else {
                        tmp$6 = Js_exn.raiseError("graphql_ppx: Field firstName on type Author is missing");
                      }
                      var match$15 = Js_dict.get(value$7, "lastName");
                      var tmp$7;
                      if (match$15 !== undefined) {
                        var value$9 = Caml_option.valFromOption(match$15);
                        var match$16 = Js_json.decodeString(value$9);
                        tmp$7 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
                      } else {
                        tmp$7 = Js_exn.raiseError("graphql_ppx: Field lastName on type Author is missing");
                      }
                      tmp$5 = {
                        firstName: tmp$6,
                        lastName: tmp$7
                      };
                    } else {
                      tmp$5 = Js_exn.raiseError("graphql_ppx: Field author on type Post is missing");
                    }
                    return {
                            id: tmp,
                            title: tmp$1,
                            body: tmp$2,
                            createdAt: tmp$3,
                            updatedAt: tmp$4,
                            tags: match$11 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(match$11))).map((function (value) {
                                      var match = Js_json.decodeString(value);
                                      if (match !== undefined) {
                                        return match;
                                      } else {
                                        return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                      }
                                    })) : Js_exn.raiseError("graphql_ppx: Field tags on type Post is missing"),
                            author: tmp$5
                          };
                  }
                }));
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        items: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          listPosts: tmp
        };
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeVariables(param) {
  return null;
}

function definition_002(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var ListPostsQueryConfig = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function parseDate(createdAt) {
  var __x = Js_json.decodeString(Belt_Option.getWithDefault(createdAt, null));
  return Belt_Option.getWithDefault(__x, "");
}

function Posts(Props) {
  var match = ApolloHooks.useQuery(undefined, undefined, undefined, undefined, undefined, undefined, undefined, definition);
  var simple = match[0];
  var tmp;
  tmp = typeof simple === "number" ? (
      simple === /* Loading */0 ? React.createElement("p", undefined, "Loading...") : React.createElement("p", undefined, "No posts sad reacts only!")
    ) : (
      simple.tag ? React.createElement("p", undefined, "No posts sad reacts only!") : Belt_Option.mapWithDefault(Belt_Option.flatMap(simple[0].listPosts, (function (listPosts) {
                    return listPosts.items;
                  })), null, (function (items) {
                return Belt_Array.map(items, (function (item) {
                              return Belt_Option.mapWithDefault(item, null, (function (item) {
                                            var parsedCreatedAt = parseDate(item.createdAt);
                                            return React.createElement(Post$Blog.make, {
                                                        title: item.title,
                                                        body: item.body,
                                                        tags: item.tags,
                                                        firstName: item.author.firstName,
                                                        lastName: item.author.lastName,
                                                        createdAt: parsedCreatedAt,
                                                        key: item.title
                                                      });
                                          }));
                            }));
              }))
    );
  return React.createElement(Section$Blog.make, {
              title: "Blog",
              subtitle: "A blog application demonstrating ReasonML, ReasonReact and Next.js",
              children: React.createElement("div", {
                    className: "columns is-multiline"
                  }, tmp)
            });
}

var make$1 = Posts;

var $$default = Posts;

export {
  ListPostsQueryConfig ,
  parseDate ,
  make$1 as make,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
